<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dream.softwarecupspring.Mapper.AdminMapper.AdminStatsMapper">

    <insert id="insertLogin" parameterType="com.dream.softwarecupspring.pojo.User.UserActivity">
        INSERT INTO user_activity (user_id, login_date, created_time)
        VALUES (#{userId}, #{loginDate}, #{createdTime})
    </insert>

    <!-- 更新会话时长 -->
    <update id="updateSession" parameterType="com.dream.softwarecupspring.pojo.User.UserActivity">
        UPDATE user_activity
        SET session_duration = #{sessionDuration}, created_time = #{createdTime}
        WHERE user_id = #{userId} AND login_date = #{loginDate}
    </update>

    <insert id="insertUserActivity" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user_activity (
            user_id, login_date, session_duration,
            page_views, actions_count, created_time
        ) VALUES (
                     #{userId}, #{loginDate}, #{sessionDuration},
                     #{pageViews}, #{actionsCount}, #{createdTime}
                 )
    </insert>

    <insert id="insertResourceAccessLog" parameterType="com.dream.softwarecupspring.pojo.Resource.ResourceAccessLog" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO resource_access_logs (
            resource_id,
            user_id,
            action_type,
            access_time,
            ip_address
        ) VALUES (
                     #{resourceId},
                     #{userId},
                     #{actionType},
                     #{accessTime},
                     #{ipAddress}
                 )
    </insert>


    <select id="getSystemOverview" resultType="map"> SELECT (SELECT COUNT(*) FROM users) AS totalUsers, (SELECT COUNT(*) FROM users WHERE role = 1) AS totalStudents, (SELECT COUNT(*) FROM users WHERE role = 2) AS totalTeachers, (SELECT COUNT(*) FROM resource) AS totalResources, (SELECT IFNULL(SUM(file_size), 0) FROM resource) AS totalStorage, (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(MIN(create_time))) AS systemUptime, (SELECT COUNT(DISTINCT user_id) FROM user_activity WHERE login_date = CURDATE()) AS activeUsers, (SELECT COUNT(*) FROM users WHERE DATE(create_time) = CURDATE()) AS newUsersToday FROM users LIMIT 1 </select>
    <!--  用户活跃度统计  -->
    <select id="getUserActivity" resultType="map">
        SELECT
                (SELECT COUNT(*) FROM users WHERE DATE(create_time) = CURDATE()) AS todayNewUsers,
#                 (SELECT COALESCE(AVG(session_duration), 0) FROM user_activity WHERE login_date = CURDATE()) AS avgSessionTime,
                (SELECT COUNT(*) FROM user_activity WHERE login_date = CURDATE()) AS totalLogins,
                (SELECT COUNT(DISTINCT user_id) FROM user_activity WHERE login_date = CURDATE()) AS uniqueLogins
    </select>

    <select id="selectActiveUserTrendByDay" resultType="map">
        SELECT
            login_date AS date,
            COUNT(DISTINCT user_id) AS activeUserCount
        FROM
            user_activity
        WHERE
            login_date <![CDATA[ >= ]]> #{startDate}
          AND login_date <![CDATA[ <= ]]> #{endDate}
        GROUP BY
            login_date
        ORDER BY
            login_date ASC
    </select>

    <select id="getRecentActivities" resultType="map">
        SELECT * FROM (
                          SELECT
                              u.id AS userId,
                              u.name AS userName,
                              CASE u.role
                                  WHEN 1 THEN 'STUDENT'
                                  WHEN 2 THEN 'TEACHER'
                                  WHEN 3 THEN 'ADMIN'
                                  END AS userRole,
                              u.create_time AS createTime,
                              'USER_REGISTER' AS type,
                              '新增用户' AS title,
                              CONCAT('新注册',
                                     CASE u.role WHEN 2 THEN '教师' WHEN 1 THEN '学生' ELSE '用户' END,
                                     '账户：', u.name) AS description,
                              u.id AS id
                          FROM users u
                          WHERE u.create_time >= NOW() - INTERVAL 7 DAY

                          UNION ALL

                          SELECT
                              u.id AS userId,
                              u.name AS userName,
                              CASE u.role
                                  WHEN 1 THEN 'STUDENT'
                                  WHEN 2 THEN 'TEACHER'
                                  WHEN 3 THEN 'ADMIN'
                                  END AS userRole,
                              r.upload_time AS createTime,
                              'RESOURCE_UPLOAD' AS type,
                              '资源上传' AS title,
                              CONCAT('上传教学资源：', r.resource_name) AS description,
                              r.id AS id
                          FROM resource r
                                   JOIN users u ON r.teacher_id = u.id
                          WHERE r.upload_time >= NOW() - INTERVAL 7 DAY

                          UNION ALL

                          SELECT
                              u.id AS userId,
                              u.name AS userName,
                              CASE u.role
                                  WHEN 1 THEN 'STUDENT'
                                  WHEN 2 THEN 'TEACHER'
                                  WHEN 3 THEN 'ADMIN'
                                  END AS userRole,
                              l.created_time AS createTime,
                              'USER_LOGIN' AS type,
                              '用户登录' AS title,
                              CONCAT(
                                      CASE u.role WHEN 1 THEN '学生' WHEN 2 THEN '教师' ELSE '用户' END,
                                      '登录系统：', u.name
                              ) AS description,
                              l.id AS id
                          FROM system_logs l
                                   JOIN users u ON l.user_id = u.id
                          WHERE l.action = 'login' AND l.created_time >= NOW() - INTERVAL 7 DAY
                      ) AS recent
        ORDER BY createTime DESC
        LIMIT 20
    </select>

    <select id="getKnowledgeDistribution" resultType="java.util.Map">
        SELECT
            CASE
                WHEN sa.score / q.score >= 0.9 THEN '优秀'
                WHEN sa.score / q.score >= 0.6 THEN '良好'
                WHEN sa.score / q.score >= 0 THEN '一般'
                ELSE '较差'
                END AS label,
            COUNT(*) AS count
        FROM student_answers sa
                 JOIN questions q ON sa.question_id = q.id
        WHERE q.knowledge = #{knowledge}
        GROUP BY label
    </select>

    <select id="getTopKnowledgeScore" resultType="java.util.Map">
        SELECT
            q.knowledge,
            ROUND(SUM(sa.score) * 100.0 / SUM(q.score), 2) AS scoreRate
        FROM
            student_answers sa
                JOIN questions q ON sa.question_id = q.id
        GROUP BY
            q.knowledge
        ORDER BY
            scoreRate DESC
        LIMIT 5
    </select>
    <select id="getScoreTrend" resultType="java.util.Map">
        select h.id  homeworkId,
               h.title,
               h.end_time,
               ROUND(AVG(sh.total_score), 2)                                             as avgScore,
               SUM(IF((sh.status = 1 or sh.status = 2), 1, 0)) / NULLIF(COUNT(sh.id), 0) AS submitRate
        from homework h
        join student_homework sh on h.id = sh.homework_id
        GROUP BY h.id

    </select>
    <select id="getInteractionStat" resultType="java.util.Map">
        SELECT
            DATE(sq.created_time) AS d,
            SUM(CASE WHEN sq.status = 1 THEN 1 ELSE 0 END) AS answered,
            SUM(CASE WHEN sq.status = 0 THEN 1 ELSE 0 END) AS unanswered
        FROM student_questions sq
        GROUP BY DATE(sq.created_time)
        ORDER BY d;
    </select>
    <select id="getAiInteractionStat" resultType="java.util.Map">
        SELECT
            DATE(saq.created_time) AS d,
            COUNT(*) AS cnt
        FROM student_ai_questions saq
        GROUP BY DATE(saq.created_time)
        ORDER BY d;
    </select>


</mapper>