<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dream.softwarecupspring.Mapper.StudentMapper.StudentStudyMapper">

    <!-- ==================== 教师端：统计与作业管理 ==================== -->
    <select id="countTotalHomework" resultType="int">
        SELECT COUNT(*) FROM student_homework sh JOIN homework h ON sh.homework_id = h.id WHERE h.teacher_id = #{teacherId}
    </select>

    <select id="countPublishedHomework" resultType="int">
        SELECT COUNT(*) FROM homework WHERE teacher_id = #{teacherId} AND status = 1
    </select>

    <select id="countGradedHomework" resultType="int">
        SELECT COUNT(*) FROM student_homework sh JOIN homework h ON sh.homework_id = h.id WHERE h.teacher_id = #{teacherId} AND total_score IS NOT NULL
    </select>

    <select id="countPendingGrade" resultType="int">
        SELECT COUNT(*) FROM student_homework sh JOIN homework h ON sh.homework_id = h.id WHERE h.teacher_id = #{teacherId} AND total_score IS NULL
    </select>

    <select id="getAverageSubmitRate" resultType="double">
        SELECT IFNULL(
         COUNT(DISTINCT sh.student_id) / NULLIF((SELECT COUNT(*) FROM teacher_student WHERE teacher_id = #{teacherId}), 0),
         0
       )
       FROM student_homework sh
       JOIN homework h ON sh.homework_id = h.id
       WHERE h.teacher_id = #{teacherId}
    </select>

    <select id="getRecentHomeworkByTeacherId" resultType="map">
        SELECT sh.* FROM student_homework sh JOIN homework h ON sh.homework_id = h.id WHERE h.teacher_id = #{teacherId} ORDER BY sh.created_time DESC LIMIT 5
    </select>

    <select id="getScoreDistributionByTeacherId" resultType="map">
        SELECT CASE
                 WHEN total_score >= 90 THEN '90-100'
                 WHEN total_score >= 80 THEN '80-89'
                 WHEN total_score >= 70 THEN '70-79'
                 WHEN total_score >= 60 THEN '60-69'
                 ELSE '0-59'
               END AS score_range,
               COUNT(*) AS count
        FROM student_homework sh JOIN homework h ON sh.homework_id = h.id
        WHERE h.teacher_id = #{teacherId}
        GROUP BY score_range
    </select>

    <!-- ==================== 学生端：课件查看 ==================== -->
    <select id="getCoursewareListByStudentId" resultType="map">
       SELECT r.*,u.name
       FROM resource r
       JOIN teacher_student ts ON r.teacher_id = ts.teacher_id
       join users u on ts.teacher_id = u.id
       WHERE ts.student_id = #{studentId}
       ORDER BY r.upload_time DESC
    </select>

    <!-- ==================== 学生端：学习统计 ==================== -->
    <select id="getTotalStudyTime" resultType="long">
        SELECT IFNULL(SUM(study_duration), 0)
        FROM student_study_record
        WHERE student_id = #{studentId}
    </select>

    <select id="getTodayStudyTime" resultType="long">
        SELECT IFNULL(SUM(study_duration), 0)
        FROM student_study_record
        WHERE student_id = #{studentId} AND DATE(last_view_time) = CURDATE()
    </select>

    <select id="getWeekStudyTime" resultType="long">
        SELECT IFNULL(SUM(study_duration), 0)
        FROM student_study_record
        WHERE student_id = #{studentId} AND YEARWEEK(last_view_time) = YEARWEEK(CURDATE())
    </select>

    <select id="getCompletedCoursewareCount" resultType="int">
        SELECT COUNT(DISTINCT resource_id)
        FROM student_study_record
        WHERE student_id = #{studentId} AND study_status = 1
    </select>

    <select id="getTotalCoursewareCount" resultType="int">
        SELECT COUNT(DISTINCT resource_id)
        FROM student_study_record
        WHERE student_id = #{studentId}
    </select>

    <select id="getAverageProgress" resultType="double">
        SELECT IFNULL(AVG(study_status), 0)
        FROM student_study_record
        WHERE student_id = #{studentId}
    </select>

    <select id="getStudyDaysCount" resultType="int">
        SELECT COUNT(DISTINCT DATE(first_view_time))
        FROM student_study_record
        WHERE student_id = #{studentId}
    </select>

    <select id="getRecentStudyRecords" resultType="map">
        SELECT * FROM student_study_record
        WHERE student_id = #{studentId}
        ORDER BY last_view_time DESC
        LIMIT 10
    </select>

    <insert id="insertStudyRecord" parameterType="com.dream.softwarecupspring.pojo.Overall.StudyRecord">
        INSERT INTO student_study_record (student_id, resource_id, study_status, first_view_time, last_view_time, view_count, study_duration, created_time, updated_time)
        VALUES (#{studentId}, #{resourceId}, #{studyStatus}, #{firstViewTime}, #{lastViewTime}, #{viewCount}, #{studyDuration}, #{createdTime}, #{updatedTime})
    </insert>

    <select id="findByStudentAndResource" resultType="com.dream.softwarecupspring.pojo.Overall.StudyRecord">
        SELECT * FROM student_study_record
        WHERE student_id = #{studentId} AND resource_id = #{resourceId}
    </select>

    <update id="updateStudyRecord">
        UPDATE student_study_record
        SET last_view_time = #{timestamp},
            view_count = view_count + 1,
            study_duration = study_duration + #{added},
            study_status = #{studyStatus},
            updated_time = NOW(),
            action = #{action}
        WHERE student_id = #{studentId} AND resource_id = #{resourceId}
    </update>
    <update id="updateResourceViewCount">
        UPDATE resource
        SET
            view_count = view_count + 1
            WHERE id = #{resourceId}
    </update>
    <update id="updateResourceDownloadCount">
        UPDATE resource
        SET
            download_count = download_count + 1
        WHERE id = #{resourceId}
    </update>

    <select id="getStudentIdsByTeacherId" resultType="java.lang.Integer">
        select student_id from teacher_student where teacher_id = #{teacherId}
    </select>

    <insert id="insertAiQuestion" parameterType="com.dream.softwarecupspring.pojo.AI.AiQuestion">
        INSERT INTO student_ai_questions (student_id, question_content,answer, created_time)
        VALUES (#{studentId}, #{questionContent},#{answer}, #{createdTime})
    </insert>

    <select id="getStudyRecords" resultType="map">
        SELECT
            r.id AS resourceId,
            r.resource_name AS resourceName,
            COALESCE(SUM(ssr.study_duration), 0) AS studyDuration,
            MAX(ssr.updated_time) AS lastStudyTime
        FROM student_study_record ssr
                 JOIN resource r ON ssr.resource_id = r.id
        WHERE ssr.student_id = #{studentId}
        GROUP BY r.id, r.resource_name
        ORDER BY lastStudyTime DESC
    </select>

    <select id="getStudyTimeTrend" resultType="map">
        SELECT
            DATE(ssr.updated_time) AS date,
            ROUND(SUM(ssr.study_duration) / 60, 1) AS studyMinutes
        FROM student_study_record ssr
        WHERE ssr.student_id = #{studentId}
          AND ssr.updated_time >= NOW() - INTERVAL #{days} DAY
        GROUP BY DATE(ssr.updated_time)
        ORDER BY DATE(ssr.updated_time)
    </select>

    <select id="getAiQuestions" resultType="map">
        SELECT id, question_content AS questionContent, answer AS aiResponse, created_time AS createdTime
        FROM student_ai_questions
        WHERE student_id = #{studentId}
        ORDER BY created_time DESC
        LIMIT #{limit}
    </select>
</mapper>

