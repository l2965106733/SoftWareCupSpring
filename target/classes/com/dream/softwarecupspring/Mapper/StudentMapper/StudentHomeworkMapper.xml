<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dream.softwarecupspring.Mapper.StudentMapper.StudentHomeworkMapper">

    <select id="getHomeworkListByStudentId" resultType="map">
        SELECT
            sh.id as student_homework_id,
            sh.homework_id,
            sh.student_id,
            sh.status,
            h.remark,
            sh.total_score,                    -- 学生得分
            sh.feedback,                 -- 教师反馈
            sh.created_time,             -- 创建时间
            h.title as homework_title,
            h.start_time as homework_start_time,
            h.end_time as homework_end_time,
            h.total_score as homework_total_score,
            u.name as teacherName        -- 教师姓名
        FROM student_homework sh
        LEFT JOIN homework h ON sh.homework_id = h.id
        LEFT JOIN users u ON u.id = h.teacher_id
        WHERE sh.student_id = #{studentId}
        order by h.end_time
    </select>

    <select id="getHomeworkDetailById" resultType="map">
        SELECT
            q.id,
            q.content,
            q.answer,
            q.explain,
            q.type,
            q.score as totalScore,
            sa.answer AS studentAnswer,
            sa.score as score
        FROM homework_questions hq
                 LEFT JOIN questions q ON hq.question_id = q.id
                 LEFT JOIN student_answers sa ON sa.question_id = q.id AND sa.homework_id = #{homeworkId}
        WHERE hq.homework_id = #{homeworkId}
        ORDER BY hq.question_order
    </select>

    <select id="getByHomeworkAndStudent" resultType="com.dream.softwarecupspring.pojo.Homework.StudentHomework">
        SELECT * FROM student_homework WHERE homework_id = #{homeworkId} AND student_id = #{studentId} LIMIT 1
    </select>

    <insert id="insertHomework"
            parameterType="com.dream.softwarecupspring.pojo.Homework.StudentHomework"
            useGeneratedKeys="true"
            keyProperty="id">
        INSERT INTO student_homework (homework_id, student_id, status, total_score, submit_time, created_time, feedback)
        VALUES (#{homeworkId}, #{studentId}, #{status}, #{totalScore}, #{submitTime}, #{createdTime}, #{feedback})

    </insert>

    <update id="updateHomeworkById" parameterType="com.dream.softwarecupspring.pojo.Homework.StudentHomework">
        UPDATE student_homework
        <set>
            status = #{status},
            total_score = #{totalScore},
            <if test="submitTime != null ">submit_time = #{submitTime},</if>
            feedback = #{feedback}
        </set>
        WHERE homework_id = #{homeworkId} and student_id = #{studentId}
    </update>

    <select id="selectById" resultType="com.dream.softwarecupspring.pojo.Homework.StudentHomework">
        SELECT * FROM student_homework WHERE id = #{studentHomeworkId}
    </select>

    <update id="updateScoreByHomeworkAndQuestion" parameterType="com.dream.softwarecupspring.pojo.Homework.StudentAnswer">
        UPDATE student_answers
        SET score = #{score}
        WHERE homework_id = #{homeworkId} AND question_id = #{questionId} AND student_id = #{studentId}
    </update>

    <select id="getTotalHomeworkCount" resultType="int">
        SELECT COUNT(*) FROM student_homework WHERE student_id = #{studentId}
    </select>

    <select id="getSubmittedHomeworkCount" resultType="int">
        SELECT COUNT(*) FROM student_homework WHERE student_id = #{studentId} AND (status = 1 || status = 2)
    </select>

    <select id="getGradedHomeworkCount" resultType="int">
        SELECT COUNT(*) FROM student_homework WHERE student_id = #{studentId} AND total_score IS NOT NULL
    </select>

    <select id="getAverageScore" resultType="double">
        SELECT IFNULL(AVG(sh.total_score/h.total_score), 0) FROM student_homework sh join homework h on sh.homework_id = h.id where student_id = #{studentId}
    </select>

    <select id="getBestScore" resultType="int">
        SELECT IFNULL(MAX(total_score), 0) FROM student_homework WHERE student_id = #{studentId}
    </select>

    <select id="getRecentHomeworkByStudentId" resultType="map">
        SELECT * FROM student_homework WHERE student_id = #{studentId} ORDER BY created_time DESC LIMIT 5
    </select>

    <select id="getScoreDistributionByStudentId" resultType="map">
        SELECT CASE
                 WHEN total_score >= 90 THEN '90-100'
                 WHEN total_score >= 80 THEN '80-89'
                 WHEN total_score >= 70 THEN '70-79'
                 WHEN total_score >= 60 THEN '60-69'
                 ELSE '0-59'
               END AS score_range,
               COUNT(*) AS count
        FROM student_homework
        WHERE student_id = #{studentId}
        GROUP BY score_range
    </select>

    <insert id="insertStudentHomework" parameterType="java.util.List">
        INSERT INTO student_homework (
        homework_id,
        student_id,
        status,
        total_score,
        created_time
        ) VALUES
        <foreach collection="list" item="item" separator=",">
            (
            #{item.homeworkId},
            #{item.studentId},
            #{item.status},
            #{item.totalScore},
            #{item.createdTime}
            )
        </foreach>
    </insert>

    <select id="selectHomeworkByHomeworkId" resultType="com.dream.softwarecupspring.pojo.Homework.StudentHomework">
        SELECT
            id,
            homework_id,
            student_id,
            status,
            total_score,
            submit_time,
            created_time,
            feedback
        FROM student_homework
        WHERE homework_id = #{homeworkId} and student_id = #{studentId}
    </select>

    <insert id="saveOrUpdateAnswer" parameterType="com.dream.softwarecupspring.pojo.Homework.StudentAnswer">
        INSERT INTO student_answers (homework_id, question_id, student_id, answer, created_time, updated_time)
        VALUES (#{homeworkId}, #{questionId}, #{studentId}, #{answer}, #{createdTime}, #{updatedTime})
        ON DUPLICATE KEY UPDATE
        answer = VALUES(answer),
        updated_time = VALUES(updated_time)
    </insert>



</mapper>

