<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dream.softwarecupspring.Mapper.TeacherMapper">

    <insert id="insertResource" parameterType="com.dream.softwarecupspring.pojo.Resource" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO resource (
            teacher_id,
            resource_name,
            resource_url,
            resource_type,
            file_size,
            upload_time,
            description,
            download_count
        ) VALUES (
                     #{teacherId},
                     #{resourceName},
                     #{resourceUrl},
                     #{resourceType},
                     #{fileSize},
                     #{uploadTime},
                     #{description},
                     #{downloadCount}
                 )
    </insert>

    <update id="updateResource" parameterType="com.dream.softwarecupspring.pojo.Resource">
        UPDATE resource
        SET
            resource_name = #{resourceName},
            description = #{description}
        WHERE id = #{id}
    </update>

    <select id="selectResourcesByTeacherId" resultType="com.dream.softwarecupspring.pojo.Resource">
        SELECT *
        FROM resource
        WHERE teacher_id = #{teacherId}
        ORDER BY upload_time DESC
    </select>

    <delete id="deleteResourceById" parameterType="long">
        DELETE FROM resource WHERE id = #{resourceId}
    </delete>

    <insert id="saveAll" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO questions (
        content,
        answer,
        `explain`,
        type,
        score,
        create_time,
        update_time
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
            #{item.content},
            #{item.answer},
            #{item.explain},
            #{item.type},
            #{item.score},
            #{item.createTime},
            #{item.updateTime}
            )
        </foreach>
    </insert>

    <insert id="saveHomework" parameterType="com.dream.softwarecupspring.pojo.Homework"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO homework (
            title, teacher_id, start_time, end_time,
            total_score, status, created_time, updated_time
        ) VALUES (
                     #{title}, #{teacherId}, #{startTime}, #{endTime},
                     #{totalScore}, #{status}, #{createTime}, #{updateTime}
                 )
    </insert>

    <insert id="insertHomeworkQuestions" parameterType="java.util.List">
        INSERT INTO homework_questions (homework_id, question_id, question_order)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.homeworkId}, #{item.questionId}, #{item.questionOrder})
        </foreach>
    </insert>

    <insert id="addTeacherAnswer">
        UPDATE student_questions
        SET teacher_id = #{teacherId},
            answer = #{answer},
            status = 1
        WHERE id = #{questionId}
    </insert>

    <select id="getHomeworkByTeacherId" resultType="com.dream.softwarecupspring.pojo.Homework">
        select id, title, status, created_time from software.homework where teacher_id = #{teacherId}
    </select>

    <select id="getStudentQuestions" resultType="com.dream.softwarecupspring.pojo.StudentQuestion">
        SELECT
            sq.id,
            sq.student_id,
            sq.teacher_id,
            sq.title,
            sq.content,
            sq.status,
            sq.answer,
            sq.created_time,
            u.name as student_name
        FROM student_questions sq
                 LEFT JOIN users u ON sq.student_id = u.id
        WHERE sq.teacher_id = #{teacherId}
        ORDER BY sq.created_time DESC
    </select>

    <select id="getHomeworkDetail" resultType="com.dream.softwarecupspring.pojo.Question">
        SELECT q.*
        FROM homework_questions hq
                 JOIN questions q ON hq.question_id = q.id
        WHERE hq.homework_id = #{homeworkId}
        ORDER BY hq.question_order
    </select>

    <select id="getStudentSubmissions" resultType="com.dream.softwarecupspring.pojo.StudentHomework">
        SELECT
            sh.id,
            sh.homework_id AS homeworkId,
            sh.student_id AS studentId,
            u.name AS studentName,
            sh.status,
            sh.total_score,
            sh.submit_time AS submitTime,
            sh.feedback,
            sh.created_time AS createdTime
        FROM student_homework sh
                 LEFT JOIN users u ON sh.student_id = u.id
        WHERE sh.homework_id = #{homeworkId}
    </select>

    <select id="getTotalStudents" resultType="int">
        SELECT COUNT(*) FROM teacher_student WHERE teacher_id = #{teacherId}
    </select>

    <select id="getNewStudentsThisWeek" resultType="int">
        SELECT COUNT(*)
        FROM teacher_student ts
                 JOIN users u ON ts.student_id = u.id
        WHERE ts.teacher_id = #{teacherId}
          AND YEARWEEK(u.create_time, 1) = YEARWEEK(NOW(), 1)
    </select>

    <select id="getHomeworkRate" resultType="double">
        SELECT IFNULL(ROUND(100.0 * completed.count / total.count, 2), 0)
        FROM (
                 SELECT COUNT(*) AS count
                 FROM homework
                 WHERE teacher_id = #{teacherId}
             ) total,
             (
                 SELECT COUNT(DISTINCT sh.student_id) AS count
                 FROM homework h
                          JOIN student_homework sh ON h.id = sh.homework_id
                 WHERE h.teacher_id = #{teacherId} AND sh.status = 1
             ) completed
    </select>

    <select id="getHomeworkTrend" resultType="double">
        SELECT IFNULL(ROUND(100.0 * (thisWeek.count - lastWeek.count) / lastWeek.count, 2), 0)
        FROM (
                 SELECT COUNT(*) AS count
                 FROM student_homework sh
                          JOIN homework h ON sh.homework_id = h.id
                 WHERE h.teacher_id = #{teacherId}
                   AND YEARWEEK(sh.submit_time, 1) = YEARWEEK(NOW(), 1)
             ) thisWeek,
             (
                 SELECT COUNT(*) AS count
                 FROM student_homework sh
                          JOIN homework h ON sh.homework_id = h.id
                 WHERE h.teacher_id = #{teacherId}
                   AND YEARWEEK(sh.submit_time, 1) = YEARWEEK(DATE_SUB(NOW(), INTERVAL 1 WEEK), 1)
             ) lastWeek
    </select>

    <select id="getAvgScore" resultType="double">
        SELECT ROUND(AVG(sh.total_score), 2)
        FROM homework h
                 JOIN student_homework sh ON h.id = sh.homework_id
        WHERE h.teacher_id = #{teacherId} AND sh.status = 1
    </select>

    <select id="getScoreTrend" resultType="double">
        SELECT IFNULL(ROUND(thisWeek.avg - lastWeek.avg, 2), 0)
        FROM (
                 SELECT AVG(sh.total_score) AS avg
                 FROM student_homework sh
                          JOIN homework h ON sh.homework_id = h.id
                 WHERE h.teacher_id = #{teacherId}
                   AND YEARWEEK(sh.submit_time, 1) = YEARWEEK(NOW(), 1)
             ) thisWeek,
             (
                 SELECT AVG(sh.total_score) AS avg
                 FROM student_homework sh
                          JOIN homework h ON sh.homework_id = h.id
                 WHERE h.teacher_id = #{teacherId}
                   AND YEARWEEK(sh.submit_time, 1) = YEARWEEK(DATE_SUB(NOW(), INTERVAL 1 WEEK), 1)
             ) lastWeek
    </select>

    <select id="getActiveRate" resultType="double">
        SELECT IFNULL(ROUND(100.0 * active.count / total.count, 2), 0)
        FROM (
                 SELECT COUNT(DISTINCT ssr.student_id) AS count
                 FROM student_study_record ssr
                          JOIN teacher_student ts ON ssr.student_id = ts.student_id
                 WHERE ts.teacher_id = #{teacherId}
             ) active,
             (
                 SELECT COUNT(*) AS count
                 FROM teacher_student
                 WHERE teacher_id = #{teacherId}
             ) total
    </select>

    <select id="getActiveIncrease" resultType="double">
        SELECT IFNULL(ROUND(100.0 * (thisWeek.count - lastWeek.count) / lastWeek.count, 2), 0)
        FROM (
                 SELECT COUNT(DISTINCT ssr.student_id) AS count
                 FROM student_study_record ssr
                          JOIN teacher_student ts ON ssr.student_id = ts.student_id
                 WHERE ts.teacher_id = #{teacherId}
                   AND YEARWEEK(ssr.updated_time, 1) = YEARWEEK(NOW(), 1)
             ) thisWeek,
             (
                 SELECT COUNT(DISTINCT ssr.student_id) AS count
                 FROM student_study_record ssr
                          JOIN teacher_student ts ON ssr.student_id = ts.student_id
                 WHERE ts.teacher_id = #{teacherId}
                   AND YEARWEEK(ssr.updated_time, 1) = YEARWEEK(DATE_SUB(NOW(), INTERVAL 1 WEEK), 1)
             ) lastWeek
    </select>

    <select id="getTotalHomework" resultType="int">
        SELECT COUNT(*) FROM homework WHERE teacher_id = #{teacherId}
    </select>

    <select id="getPublishedHomework" resultType="int">
        SELECT COUNT(*) FROM homework WHERE teacher_id = #{teacherId} AND status = 1
    </select>

    <select id="getGradedHomework" resultType="int">
        SELECT COUNT(DISTINCT sh.homework_id)
        FROM student_homework sh
                 JOIN homework h ON sh.homework_id = h.id
        WHERE h.teacher_id = #{teacherId} AND sh.total_score IS NOT NULL
    </select>

    <select id="getPendingGrade" resultType="int">
        SELECT COUNT(DISTINCT sh.homework_id)
        FROM student_homework sh
                 JOIN homework h ON sh.homework_id = h.id
        WHERE h.teacher_id = #{teacherId} AND sh.total_score IS NULL
    </select>

    <select id="getSubmitRate" resultType="double">
        SELECT IFNULL(ROUND(100.0 * submitted.count / total.count, 2), 0)
        FROM (
                 SELECT COUNT(*) AS count FROM student_homework sh
                                                   JOIN homework h ON sh.homework_id = h.id
                 WHERE h.teacher_id = #{teacherId}
             ) submitted,
             (
                 SELECT COUNT(*) AS count FROM homework WHERE teacher_id = #{teacherId}
             ) total
    </select>

    <select id="getScoreRangeCount" resultType="int">
        SELECT COUNT(*)
        FROM student_homework sh
                 JOIN homework h ON sh.homework_id = h.id
        WHERE h.teacher_id = #{teacherId}
          AND sh.total_score BETWEEN #{min} AND #{max}
    </select>

    <select id="getRecentHomework" resultType="com.dream.softwarecupspring.pojo.RecentHomework">
        SELECT h.id, h.title,
               COUNT(DISTINCT sh.student_id) AS submittedCount,
               (SELECT COUNT(*) FROM teacher_student WHERE teacher_id = #{teacherId}) AS totalStudents,
               SUM(CASE WHEN sh.total_score IS NOT NULL THEN 1 ELSE 0 END) AS gradedCount
        FROM homework h
                 LEFT JOIN student_homework sh ON h.id = sh.homework_id
        WHERE h.teacher_id = #{teacherId}
        GROUP BY h.id, h.title
        ORDER BY h.created_time DESC
        LIMIT 5
    </select>

    <select id="getStudentSummaries" resultType="com.dream.softwarecupspring.pojo.StudentSummary">
        SELECT u.id,
               u.name,
               u.identifier AS studentId,
               ROUND(COALESCE(SUM(ssr.study_duration) / COUNT(DISTINCT ssr.resource_id) / 60, 0)) AS progress,
               ROUND(AVG(sh.total_score), 1) AS avgScore,
               COUNT(CASE WHEN sh.status = 1 THEN 1 END) AS homeworkCount,
               (SELECT COUNT(*) FROM homework WHERE teacher_id = #{teacherId}) AS totalHomework,
               MAX(ssr.updated_time) AS lastActive,
               u.subject AS className
        FROM users u
                 LEFT JOIN student_study_record ssr ON u.id = ssr.student_id
                 LEFT JOIN student_homework sh ON u.id = sh.student_id
                 JOIN teacher_student ts ON u.id = ts.student_id
        WHERE ts.teacher_id = #{teacherId} AND u.role = 0
        GROUP BY u.id, u.name, u.identifier, u.subject
    </select>

    <select id="getTotalResources" resultType="int">
        SELECT COUNT(*) FROM resource WHERE teacher_id = #{teacherId}
    </select>

    <select id="getWeeklyUploads" resultType="int">
        SELECT COUNT(*) FROM resource
        WHERE teacher_id = #{teacherId} AND YEARWEEK(upload_time, 1) = YEARWEEK(NOW(), 1)
    </select>

    <select id="getResourceViewCount" resultType="int">
        SELECT SUM(view_count) FROM resource WHERE teacher_id = #{teacherId}
    </select>

    <select id="getResourceDownloadCount" resultType="int">
        SELECT SUM(download_count) FROM resource WHERE teacher_id = #{teacherId}
    </select>

    <select id="getPopularResources" resultType="com.dream.softwarecupspring.pojo.PopularResource">
        SELECT id, resource_name AS fileName, view_count AS viewCount, download_count AS downloadCount
        FROM resource
        WHERE teacher_id = #{teacherId}
        ORDER BY view_count DESC, download_count DESC
        LIMIT 5
    </select>

    <select id="getTotalQuestions" resultType="int">
        SELECT COUNT(*)
        FROM student_questions
        WHERE teacher_id = #{teacherId}
    </select>

    <!-- 已回答数 -->
    <select id="getAnsweredQuestions" resultType="int">
        SELECT COUNT(*)
        FROM student_questions
        WHERE teacher_id = #{teacherId} AND status = 1
    </select>

    <!-- 待回答数 -->
    <select id="getPendingQuestions" resultType="int">
        SELECT COUNT(*)
        FROM student_questions
        WHERE teacher_id = #{teacherId} AND status = 0
    </select>

    <!-- 平均评分 -->
    <select id="getAvgRating" resultType="double">
        SELECT ROUND(AVG(rating), 1)
        FROM student_questions
        WHERE teacher_id = #{teacherId} AND rating IS NOT NULL
    </select>

    <!-- 平均响应时间（单位：小时） -->
    <select id="getAvgResponseTime" resultType="double">
        SELECT ROUND(AVG(TIMESTAMPDIFF(SECOND, created_time, answer_time)) / 3600, 1)
        FROM student_questions
        WHERE teacher_id = #{teacherId} AND answer_time IS NOT NULL
    </select>

    <!-- 最近提问列表 -->
    <select id="getRecentQuestions" resultType="com.dream.softwarecupspring.pojo.RecentQuestion">
        SELECT sq.id,
               sq.title,
               u.name AS studentName,
               DATE_FORMAT(sq.created_time, '%Y-%m-%d %H:%i:%s') AS createdTime
        FROM student_questions sq
                 JOIN users u ON sq.student_id = u.id
        WHERE sq.teacher_id = #{teacherId}
        ORDER BY sq.created_time DESC
        LIMIT 5
    </select>


</mapper>