<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dream.softwarecupspring.Mapper.TeacherMapper.TeacherStatsMapper">

    <select id="getTotalStudents" resultType="int">
        SELECT COUNT(*) FROM teacher_student WHERE teacher_id = #{teacherId}
    </select>

    <select id="getNewStudentsThisWeek" resultType="int">
        SELECT COUNT(*)
        FROM teacher_student ts
                 JOIN users u ON ts.student_id = u.id
        WHERE ts.teacher_id = #{teacherId}
          AND YEARWEEK(u.create_time, 1) = YEARWEEK(NOW(), 1)
    </select>

    <select id="getHomeworkRate" resultType="double">
        SELECT IFNULL(ROUND(100.0 * completed.count / total.count, 2), 0)
        FROM (
                 SELECT COUNT(*) AS count
                 FROM homework
                 WHERE teacher_id = #{teacherId}
             ) total,
             (
                 SELECT COUNT(DISTINCT sh.student_id) AS count
                 FROM homework h
                          JOIN student_homework sh ON h.id = sh.homework_id
                 WHERE h.teacher_id = #{teacherId} AND sh.status = 1
             ) completed
    </select>

    <select id="getHomeworkTrend" resultType="double">
        SELECT IFNULL(ROUND(100.0 * (thisWeek.count - lastWeek.count) / lastWeek.count, 2), 0)
        FROM (
                 SELECT COUNT(*) AS count
                 FROM student_homework sh
                          JOIN homework h ON sh.homework_id = h.id
                 WHERE h.teacher_id = #{teacherId}
                   AND YEARWEEK(sh.submit_time, 1) = YEARWEEK(NOW(), 1)
             ) thisWeek,
             (
                 SELECT COUNT(*) AS count
                 FROM student_homework sh
                          JOIN homework h ON sh.homework_id = h.id
                 WHERE h.teacher_id = #{teacherId}
                   AND YEARWEEK(sh.submit_time, 1) = YEARWEEK(DATE_SUB(NOW(), INTERVAL 1 WEEK), 1)
             ) lastWeek
    </select>

    <select id="getAvgScore" resultType="double">
        SELECT ROUND(AVG(sh.total_score/h.total_score), 2)
        FROM homework h
                 JOIN student_homework sh ON h.id = sh.homework_id
        WHERE h.teacher_id = #{teacherId} AND (sh.status = 1 || sh.status = 2)
    </select>

    <select id="getScoreTrend" resultType="double">
        SELECT IFNULL(ROUND(thisWeek.avg - lastWeek.avg, 2), 0)
        FROM (
                 SELECT AVG(sh.total_score) AS avg
                 FROM student_homework sh
                          JOIN homework h ON sh.homework_id = h.id
                 WHERE h.teacher_id = #{teacherId}
                   AND YEARWEEK(sh.submit_time, 1) = YEARWEEK(NOW(), 1)
             ) thisWeek,
             (
                 SELECT AVG(sh.total_score) AS avg
                 FROM student_homework sh
                          JOIN homework h ON sh.homework_id = h.id
                 WHERE h.teacher_id = #{teacherId}
                   AND YEARWEEK(sh.submit_time, 1) = YEARWEEK(DATE_SUB(NOW(), INTERVAL 1 WEEK), 1)
             ) lastWeek
    </select>

    <select id="getActiveRate" resultType="double">
        SELECT IFNULL(ROUND(100.0 * active.count / total.count, 2), 0)
        FROM (
                 SELECT COUNT(DISTINCT ssr.student_id) AS count
                 FROM student_study_record ssr
                          JOIN teacher_student ts ON ssr.student_id = ts.student_id
                 WHERE ts.teacher_id = #{teacherId}
             ) active,
             (
                 SELECT COUNT(*) AS count
                 FROM teacher_student
                 WHERE teacher_id = #{teacherId}
             ) total
    </select>

    <select id="getActiveIncrease" resultType="double">
        SELECT IFNULL(ROUND(100.0 * (thisWeek.count - lastWeek.count) / lastWeek.count, 2), 0)
        FROM (
                 SELECT COUNT(DISTINCT ssr.student_id) AS count
                 FROM student_study_record ssr
                          JOIN teacher_student ts ON ssr.student_id = ts.student_id
                 WHERE ts.teacher_id = #{teacherId}
                   AND YEARWEEK(ssr.updated_time, 1) = YEARWEEK(NOW(), 1)
             ) thisWeek,
             (
                 SELECT COUNT(DISTINCT ssr.student_id) AS count
                 FROM student_study_record ssr
                          JOIN teacher_student ts ON ssr.student_id = ts.student_id
                 WHERE ts.teacher_id = #{teacherId}
                   AND YEARWEEK(ssr.updated_time, 1) = YEARWEEK(DATE_SUB(NOW(), INTERVAL 1 WEEK), 1)
             ) lastWeek
    </select>

    <select id="getTotalHomework" resultType="int">
        SELECT COUNT(*) FROM homework WHERE teacher_id = #{teacherId}
    </select>

    <select id="getPublishedHomework" resultType="int">
        SELECT COUNT(*) FROM homework WHERE teacher_id = #{teacherId} AND status = 1
    </select>

    <select id="getGradedHomework" resultType="int">
        SELECT COUNT(DISTINCT sh.homework_id)
        FROM student_homework sh
                 JOIN homework h ON sh.homework_id = h.id
        WHERE h.teacher_id = #{teacherId} AND sh.total_score IS NOT NULL
    </select>

    <select id="getPendingGrade" resultType="int">
        SELECT COUNT(DISTINCT sh.homework_id)
        FROM student_homework sh
                 JOIN homework h ON sh.homework_id = h.id
        WHERE h.teacher_id = #{teacherId} and sh.status = 1 AND sh.total_score IS NULL
    </select>

    <select id="getSubmitRate" resultType="double">
        SELECT IFNULL(ROUND(100.0 * submitted.count / total.count, 2), 0)
        FROM (
                 SELECT COUNT(*) AS count FROM student_homework sh
                                                   JOIN homework h ON sh.homework_id = h.id
                 WHERE h.teacher_id = #{teacherId} and (sh.status = 1 or sh.status = 2)
             ) submitted,
             (
                 SELECT COUNT(*) AS count FROM student_homework sh
                                                   JOIN homework h ON sh.homework_id = h.id
                 WHERE h.teacher_id = #{teacherId}
             ) total
    </select>

    <select id="getScoreRangeCount" resultType="int">
        SELECT COUNT(*)
        FROM student_homework sh
                 JOIN homework h ON sh.homework_id = h.id
        WHERE h.teacher_id = #{teacherId}
          AND sh.total_score / h.total_score BETWEEN #{min} AND #{max}
    </select>

    <select id="getRecentHomework" resultType="com.dream.softwarecupspring.pojo.Homework.RecentHomework">
        SELECT h.id, h.title,
               (select count(*) from student_homework join software.homework h2 on h2.id = student_homework.homework_id  where student_homework.status = 1 or student_homework.status = 2) AS submittedCount,
               (SELECT COUNT(*) FROM teacher_student WHERE teacher_id = #{teacherId}) AS totalStudents,
               SUM(CASE WHEN sh.total_score IS NOT NULL THEN 1 ELSE 0 END) AS gradedCount
        FROM homework h
                 LEFT JOIN student_homework sh ON h.id = sh.homework_id
        WHERE h.teacher_id = #{teacherId}
        GROUP BY h.id, h.title
        ORDER BY h.created_time DESC
        LIMIT 5
    </select>

    <select id="getStudentSummaries" resultType="com.dream.softwarecupspring.pojo.Overall.StudentSummary">
        SELECT u.id,
               u.name,
               u.identifier AS studentId,
               ROUND(COALESCE(SUM(ssr.study_duration) / COUNT(DISTINCT ssr.resource_id) / 60, 0)) AS progress,
               ROUND(AVG(sh.total_score), 1) AS avgScore,
               (SELECT COUNT(*) FROM student_homework WHERE student_homework.student_id = u.id AND (student_homework.status = 1 OR student_homework.status = 2)) AS homeworkCount,
               (SELECT COUNT(*) FROM homework WHERE teacher_id = #{teacherId}) AS totalHomework,
               MAX(ssr.updated_time) AS lastActive,
               MAX(ssr.view_count) AS viewCount,
               (SELECT COUNT(*) FROM student_questions sq WHERE sq.teacher_id = #{teacherId} and sq.student_id = u.id) AS questionCount
        FROM users u
                 LEFT JOIN student_study_record ssr ON u.id = ssr.student_id
                 LEFT JOIN student_homework sh ON u.id = sh.student_id
                 JOIN teacher_student ts ON u.id = ts.student_id
        WHERE ts.teacher_id = #{teacherId} AND u.role = 1
        GROUP BY u.id, u.name, u.identifier
    </select>

    <select id="getTotalResources" resultType="long">
        SELECT COUNT(*) FROM resource WHERE teacher_id = #{teacherId}
    </select>

    <select id="getWeeklyUploads" resultType="long">
        SELECT COUNT(*) FROM resource
        WHERE teacher_id = #{teacherId} AND YEARWEEK(upload_time, 1) = YEARWEEK(NOW(), 1)
    </select>

    <select id="getResourceViewCount" resultType="long">
        SELECT SUM(view_count) FROM resource WHERE teacher_id = #{teacherId}
    </select>

    <select id="getResourceDownloadCount" resultType="long">
        SELECT SUM(download_count) FROM resource WHERE teacher_id = #{teacherId}
    </select>

    <select id="getPopularResources" resultType="com.dream.softwarecupspring.pojo.Resource.PopularResource">
        SELECT id, resource_name AS fileName, view_count AS viewCount, download_count AS downloadCount
        FROM resource
        WHERE teacher_id = #{teacherId}
        ORDER BY view_count DESC, download_count DESC
        LIMIT 5
    </select>

    <select id="getTotalQuestions" resultType="int">
        SELECT COUNT(*)
        FROM student_questions
        WHERE teacher_id = #{teacherId}
    </select>

    <!-- 已回答数 -->
    <select id="getAnsweredQuestions" resultType="int">
        SELECT COUNT(*)
        FROM student_questions
        WHERE teacher_id = #{teacherId} AND status = 1
    </select>

    <!-- 待回答数 -->
    <select id="getPendingQuestions" resultType="int">
        SELECT COUNT(*)
        FROM student_questions
        WHERE teacher_id = #{teacherId} AND status = 0
    </select>

    <!-- 平均评分 -->
    <select id="getAvgRating" resultType="double">
        SELECT ROUND(AVG(rating), 1)
        FROM student_questions
        WHERE teacher_id = #{teacherId} AND rating IS NOT NULL
    </select>

    <!-- 平均响应时间（单位：小时） -->
    <select id="getAvgResponseTime" resultType="double">
        SELECT ROUND(AVG(TIMESTAMPDIFF(SECOND, created_time, answer_time)) / 3600, 1)
        FROM student_questions
        WHERE teacher_id = #{teacherId} AND answer_time IS NOT NULL
    </select>

    <!-- 最近提问列表 -->
    <select id="getRecentQuestions" resultType="com.dream.softwarecupspring.pojo.Homework.RecentQuestion">
        SELECT sq.id,
               sq.title,
               u.name AS studentName,
               DATE_FORMAT(sq.created_time, '%Y-%m-%d %H:%i:%s') AS createdTime
        FROM student_questions sq
                 JOIN users u ON sq.student_id = u.id
        WHERE sq.teacher_id = #{teacherId}
        ORDER BY sq.created_time DESC
        LIMIT 5
    </select>

    <select id="getTeacherOverview" resultType="map">
        SELECT
            -- 教师基本信息
            u.id AS id,
            u.name AS name,

            -- 教学统计
            (SELECT COUNT(*) FROM teacher_student WHERE teacher_id = #{teacherId}) AS studentCount,
            (SELECT COUNT(*) FROM homework WHERE teacher_id = #{teacherId}) AS assignmentCount,
            (
                SELECT ROUND(
                               IFNULL(SUM(CASE WHEN sh.status = 1 THEN 1 ELSE 0 END) / NULLIF(COUNT(*), 0), 0) * 100, 1
                       )
                FROM student_homework sh
                         JOIN homework h ON sh.homework_id = h.id
                WHERE h.teacher_id = #{teacherId}
            ) AS completionRate,
            (
                SELECT ROUND(AVG(sh.total_score/h.total_score), 1)
                FROM student_homework sh
                         JOIN homework h ON sh.homework_id = h.id
                WHERE h.teacher_id = #{teacherId}
            ) AS averageScore,
            (SELECT COUNT(*) FROM resource WHERE teacher_id = #{teacherId}) AS resourceCount,
            (SELECT COUNT(*) FROM student_questions WHERE teacher_id = #{teacherId}) AS interactionCount
        FROM users u
        WHERE u.id = #{teacherId}
        LIMIT 1
    </select>


    <select id="getTeacherActivities" resultType="map">
        SELECT * FROM (
                          SELECT
                              h.id AS id,
                              'ASSIGNMENT_PUBLISH' AS type,
                              '发布新作业' AS title,
                              h.title AS description,
                              h.created_time AS time
                          FROM homework h
                          WHERE h.teacher_id = #{teacherId}

                          UNION ALL

                          SELECT
                              sq.id AS id,
                              'STUDENT_QUESTION' AS type,
                              '回复学生提问' AS title,
                              sq.answer AS description,
                              sq.answer_time AS time
                          FROM student_questions sq
                          WHERE sq.teacher_id = #{teacherId} AND sq.status = 1
                      ) AS activities
        ORDER BY time DESC
        LIMIT #{limit}
    </select>
</mapper>